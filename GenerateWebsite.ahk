#NoEnv

;credentials
ForumUsername := "Uberi"
AutoHotkeyNetUsername := ""
AutoHotkeyNetPassword := ""

;behavior
ShowGUI := 1
UploadWebsite := 0
SearchEnglishForum := 1
SearchGermanForum := 1
UseCache := 1

;appearance
Template := "Picturesque Blue"
SortEntries := 0

;output
OutputDirectory := A_ScriptDir . "\WebPage"
InlineStylesheet := 0
RelativeLinks := 0
DownloadResources := 0

;wip: show progress in the GUI only if ShowGUI is in effect, otherwise remain silent
;wip: autogenerated help message available from the GUI and the command line

ResourcesPath := A_ScriptDir . "\Resources"

If (AutoHotkeyNetUsername = "") ;set the AutoHotkey.net username if it was not given
 AutoHotkeyNetUsername := ForumUsername

Gosub, ProcessCommandLine

If ShowGUI
 Gosub, OptionsDialogShow
Else
 Gosub, GenerateWebsite
Return

GenerateWebsite:
TemplatePath := ResourcesPath . "\" . Template ;set the path of the template
PagePath := TemplatesPath . "\index.html"
StylesheetPath := TemplatePath . "\style.css" ;set the path of the stylesheet
Gosub, ValidateOptions
Results := SearchForum(ForumUsername,SearchEnglishForum,SearchGermanForum)
If UseCache
{
 FileRead, Cache, %ResourcesPath%\Cache.txt ;read the page cache
 Cache := ProcessCache(Cache)
}
If SortEntries
 Results := SortByTitle(Results)
For Index, Result In Results
{
 ;wip: do something with the results here
}
ExitApp

;searches the AutoHotkey forums for scripts posted by a specified forum user
SearchForum(ForumUsername,SearchEnglishForum,SearchGermanForum)
{
 Results := Array()
 If SearchEnglishForum
 {
  For Index, Result In ForumSearch("http://www.autohotkey.com/forum/","",ForumUsername,2) ;search the English AutoHotkey forum for posts by the specified forum user
  {
   If (Result.Author = ForumUsername)
    ObjInsert(Results,Result)
  }
 }
 If SearchGermanForum
 {
  For Index, Result In ForumSearch("http://de.autohotkey.com/forum/","",ForumUsername,2) ;search the German AutoHotkey forum for posts by the specified forum user
  {
   If (Result.Author = ForumUsername)
    ObjInsert(Results,Result)
  }
 }
 Return, Results
}

;sorts an array of results by title
SortByTitle(InputObject)
{
 MaxIndex := ObjMaxIndex(InputObject), (MaxIndex = "") ? (MaxIndex := 0) : ""
 If (MaxIndex < 2)
  Return, InputObject
 Middle := MaxIndex >> 1, SortLeft := Object(), SortRight := Object()
 Loop, %Middle%
  ObjInsert(SortLeft,InputObject[A_Index]), ObjInsert(SortRight,InputObject[Middle + A_Index])
 If (MaxIndex & 1)
  ObjInsert(SortRight,InputObject[MaxIndex])
 SortLeft := SortByTitle(SortLeft), SortRight := SortByTitle(SortRight), MaxRight := MaxIndex - Middle, LeftIndex := 1, RightIndex := 1, Result := Object()
 Loop, %MaxIndex%
 {
  If (LeftIndex > Middle)
   ObjInsert(Result,SortRight[RightIndex]), RightIndex ++
  Else If ((RightIndex > MaxRight) || (SortLeft[LeftIndex].Title < SortRight[RightIndex].Title))
   ObjInsert(Result,SortLeft[LeftIndex]), LeftIndex ++
  Else
   ObjInsert(Result,SortRight[RightIndex]), RightIndex ++
 }
 Return, Result
}

ValidateOptions:
If !InStr(FileExist(OutputDirectory),"D") ;output directory does not exist
{
 MsgBox, 16, Error, Invalid output directory:`n`n"%OutputDirectory%"
 ExitApp, 1
}

If !InStr(FileExist(TemplatePath),"D") ;output directory does not exist
{
 MsgBox, 16, Error, Invalid template:`n`n"%Template%"
 ExitApp, 1
}

FileRead, Stylesheet, %StylesheetPath% ;read the stylesheet
If ErrorLevel ;stylesheet could not be read
{
 MsgBox, 16, Error, Could not find stylesheet:`n`n"%StylesheetPath%"
 ExitApp, 1
}
Return

ShowObject(ShowObject,Padding = "")
{
 ListLines, Off
 If !IsObject(ShowObject)
 {
  ListLines, On
  Return, ShowObject
 }
 ObjectContents := ""
 For Key, Value In ShowObject
 {
  If IsObject(Value)
   Value := "`n" . ShowObject(Value,Padding . A_Tab)
  ObjectContents .= Padding . Key . ": " . Value . "`n"
 }
 ObjectContents := SubStr(ObjectContents,1,-1)
 If (Padding = "")
  ListLines, On
 Return, ObjectContents
}

ProcessCache(Cache)
{
 Cache := Trim(Cache," `t`n") ;remove leading and trailing whitespace and newlines
 Result := Object()
 Loop, Parse, Cache, `n, %A_Space%`t
 {
  Position := InStr(A_LoopField,"`t"), URL := SubStr(A_LoopField,1,Position - 1), Field := SubStr(A_LoopField,Position + 1) ;extract the URL field
  Entry := Object()
  Position := InStr(Field,"`t"), Entry.Type := SubStr(Field,1,Position - 1), Field := SubStr(Field,Position + 1) ;extract the type field
  Position := InStr(Field,"`t"), Entry.Image := SubStr(Field,1,Position - 1), Field := SubStr(Field,Position + 1) ;extract the image field
  Position := InStr(Field,"`t"), Entry.Download := SubStr(Field,1,Position - 1), Field := SubStr(Field,Position + 1) ;extract the download field
  Entry.Description := Field ;extract the description field
  ObjInsert(Result,URL,Entry) ;add the entry to the cache object
 }
 Return, Result
}

ProcessCommandLine:
ValidParameters := Object("ForumUsername",0,"AutoHotkeyNetUsername",0,"AutoHotkeyNetPassword",0,"ShowGUI",1,"UploadWebsite",1,"SearchEnglishForum",1,"SearchGermanForum",1,"UseCache",1,"Template",0,"SortEntries",1,"OutputDirectory",0,"InlineStylesheet",1,"RelativeLinks",1,"DownloadResources",1) ;a list of parameters and the types they accept (0 for string, 1 for boolean)
Loop, %0% ;loop through each command line parameter in the form "--OPTION=VALUE"
{
 Parameter := %A_Index%
 If (SubStr(Parameter,1,2) != "--") ;parameters must begin with "--"
 {
  MsgBox, 16, Error, Invalid command line parameter given:`n`n"%Parameter%"
  ExitApp, 1
 }
 Temp1 := SubStr(Parameter,3), Position := InStr(Temp1,"=")
 If !Position ;could not find "="
 {
  MsgBox, 16, Error, Option is missing value:`n`n"%Parameter%"
  ExitApp, 1
 }
 Option := SubStr(Temp1,1,Position - 1), Value := SubStr(Temp1,Position + 1)
 If !ObjHasKey(ValidParameters,Option)
 {
  MsgBox, 16, Error, Unknown option:`n`n"%Parameter%"
  ExitApp, 1
 }
 If ValidParameters[Option] ;parameter is a boolean flag
 {
  If (Value = "True")
   Value := 1
  Else If (Value = "False")
   Value := 0
  Else
   Value := !!Value
 }
 %Option% := Value
}
Return

#Include Options Dialog.ahk
#Include Forum Functions.ahk
#Include Template.ahk